import ArgumentParser
import Foundation

extension URL {
    var isDirectory: Bool {
        (try? resourceValues(forKeys: [.isDirectoryKey]))?.isDirectory ?? false
    }
}

struct CommandLineInterface: ParsableCommand {
    static let configuration = CommandConfiguration(
        abstract: "Provide a file or directory of json generated by compiled solidity."
    )
    
    @Flag(
        name: .customLong("classname"),
        help: "Add contract to the end of class name"
    )
    var addContractToName: Bool = false

    @Option(
        name: .customLong("import"),
        help: "Add imports manually for custom name dependency, they should be separated by comma. The default is import Web3",
        transform: { input in
            input.split(separator: ",").map({String($0)})
    })
    var manualImport: [String]?
    
    @Argument(
        help: "Provide json output file or folder path"
    )
    var path: String
    
    func generateFromFile(
        inputFileURL: URL,
        relativeOutputPath: String = "outputs"
    ) {
        let contractJson = File.parseJson(fileURL: inputFileURL, jsonType: ContractJson.self)
        
        var contractName = contractJson.contractName
        if addContractToName {
            contractName += "Contract"
        }
        
        var text: String
        if let manualImport = manualImport {
            text = Codegen.generate(
                contractName: contractName, contractJson, importList: manualImport)
        } else {
            text = Codegen.generate(
                contractName: contractName, contractJson
            )
        }
        
        text = prettify(text: text)
        
        
        let outputURL = inputFileURL
            .deletingLastPathComponent()
            .appendingPathComponent(relativeOutputPath)
            .appendingPathComponent(contractName)
            .appendingPathExtension("swift")
        
        File.generate(fileURL: outputURL, content: text)
    }
    
    func run() {
        let pathURL = URL(fileURLWithPath: FileManager.default.currentDirectoryPath).appendingPathComponent(path)
        
        if pathURL.isDirectory {
            let files: [URL]
            do {
                files = try FileManager.default.contentsOfDirectory(at: pathURL, includingPropertiesForKeys: nil)
            } catch {
                fatalError("Cannot get list of file in directory: \(pathURL.absoluteString), error: \(error)")
            }
            
            for file in files {
                if file.pathExtension == "json" {
                    print("Generating file for: \(file.lastPathComponent)")
                    
                    generateFromFile(inputFileURL: file)
                } else {
                    print("Omitting non-json file: \(file.lastPathComponent)")
                }
            }
        } else {
            print("Generating file for: \(pathURL.lastPathComponent)")
            
            generateFromFile(inputFileURL: pathURL)
        }
    }
}

CommandLineInterface.main()

